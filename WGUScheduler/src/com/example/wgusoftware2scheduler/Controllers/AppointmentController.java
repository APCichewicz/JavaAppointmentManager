package com.example.wgusoftware2scheduler.Controllers;

import com.example.wgusoftware2scheduler.Models.Appointment;
import com.example.wgusoftware2scheduler.Models.DataSet;
import com.example.wgusoftware2scheduler.Utility.JDBC;
import com.example.wgusoftware2scheduler.Utility.Popups;
import com.example.wgusoftware2scheduler.Utility.TimeHandler;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.LocalTime;
/**
 AppointmentController is a class that implements the CanPass interface and handles the functionality for the appointment screen of the application.
 It allows users to add, update, or delete appointments and validates their input.
 */
public class AppointmentController implements CanPass {
    public TextField IdField;
    public TextField TitleField;
    public TextField TypeField;
    public TextField DescField;
    public TextField LocationField;
    public DatePicker Date;
    public DatePicker Date1;
    public ComboBox Start;
    public ComboBox End;
    public ComboBox Customer;
    public ComboBox User;
    public ComboBox Contact;
    public Button SubmitButton;
    public Button CancelButton;
    public Label AppointmentHeader;
    private Appointment appointment;

    @Override
    public void passData(Object data) {
        this.appointment = (Appointment) data;
        AppointmentHeader.setText("Edit Appointment");

        IdField.setText(String.valueOf(appointment.getID()));
        TitleField.setText(appointment.getTitle());
        TypeField.setText(appointment.getType());
        DescField.setText(appointment.getDescription());
        LocationField.setText(appointment.getLocation());
        Date.setValue(appointment.getStart());
        Date1.setValue(appointment.getEnd());
        Start.setValue(appointment.getStartTime().toString());
        End.setValue(appointment.getEndTime().toString());
        Customer.setValue(DataSet.getCustomer(appointment.getCustomerID()).getName());
        User.setValue(DataSet.getUser(appointment.getUserID()).getName());
        Contact.setValue(DataSet.getContact(appointment.getContactID()).getName());
    }
    /**

     Initializes the appointment screen by setting up the appropriate fields and combo boxes based on the provided appointment data.
     */
    @FXML
    private void initialize() {
        TimeHandler.timeRange("00:00", "23:45", 15).forEach(time -> {
            Start.getItems().add(time);
            End.getItems().add(time);
        });
        IdField.setText("Autogenerated upon submission");
        Start.setValue("08:00");
        End.setValue("22:00");
        DataSet.getCustomers().stream().forEach(customer -> Customer.getItems().add(customer.getName()));
        DataSet.getContacts().stream().forEach(contact -> Contact.getItems().add(contact.getName()));
        DataSet.getUsers().stream().forEach(user -> User.getItems().add(user.getName()));
    }
    /**

     Handles the cancel button action by confirming the user's intent and returning to the main view.
     */
    @FXML
    private void onCancelButtonClicked(ActionEvent event) {
        if (Popups.confirmDialog("Cancel", "Are you sure you want to cancel?")) {
            try {
                Stage stage = (Stage) CancelButton.getScene().getWindow();
                stage.setOnCloseRequest(e -> {
                    stage.close();
                });
                Parent root = FXMLLoader
                        .load(getClass().getResource("/com/example/wgusoftware2scheduler/resources/MainView.fxml"));
                Scene scene = new Scene(root);
                stage.setScene(scene);
                stage.show();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    /**

     Handles the submit button action by validating the appointment input and adding, updating, or deleting the appointment from the database.
     Returns to the main view after processing the input.
     */
    @FXML
    private void onSubmitButtonClicked(ActionEvent event) {

        if (TitleField.getText() == null || TypeField.getText() == null || DescField.getText() == null
                || LocationField.getText() == null || Date.getValue() == null || Date1.getValue() == null
                || Start.getValue() == null || End.getValue() == null || Customer.getValue() == null
                || User.getValue() == null || Contact.getValue() == null) {
            Popups.error("Error", "Please fill out all fields");
            return;
        }

        String title = TitleField.getText();
        String type = TypeField.getText();
        String desc = DescField.getText();
        String location = LocationField.getText();
        LocalDateTime startDate = LocalDateTime.of(Date.getValue(), LocalTime.parse(Start.getValue().toString()));
        LocalDateTime endDate = LocalDateTime.of(Date1.getValue(), LocalTime.parse(End.getValue().toString()));
        int customerID = DataSet.getCustomer(Customer.getValue().toString()).getID();
        int userID = DataSet.getUser(User.getValue().toString()).getID();
        int contactID = DataSet.getContact(Contact.getValue().toString()).getID();
        System.out.println(contactID);


        try {
            if (!Appointment.isValid(title, type, desc, location, startDate, endDate, customerID, userID, contactID)) {
                Popups.error("Error", "Invalid data");
                return;
            }
        } catch (IllegalArgumentException e) { Popups.error("Error", e.getMessage()); return;}


        if (appointment == null) {
            try {
                Appointment.checkTimeOverlap(startDate, endDate, userID);
            } catch (IllegalArgumentException e) {
                Popups.error("Error", e.getMessage());
                return;
            }
            JDBC.addAppointment(title, type, desc, location, Timestamp.valueOf(startDate), Timestamp.valueOf(endDate), customerID, userID, contactID);


        } else {
            try {
                Appointment.checkTimeOverlap(startDate, endDate, userID, appointment.getID());
            } catch (IllegalArgumentException e) {
                Popups.error("Error", e.getMessage());
                return;
            }
            JDBC.updateAppointment(appointment.getID(), title, type, desc, location, Timestamp.valueOf(startDate), Timestamp.valueOf(endDate), customerID, userID, contactID);


        }
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        try {
            Parent root = FXMLLoader.load(
                    ReportController.class.getResource("/com/example/wgusoftware2scheduler/resources/MainView.fxml"));
            Scene scene = new Scene(root);
            stage.setScene(scene);
            stage.show();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
